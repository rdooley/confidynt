// Code generated by MockGen. DO NOT EDIT.
// Source: dynamo.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/rdooley/confidynt/types"
	reflect "reflect"
)

// MockDynamo is a mock of Dynamo interface
type MockDynamo struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoMockRecorder
}

// MockDynamoMockRecorder is the mock recorder for MockDynamo
type MockDynamoMockRecorder struct {
	mock *MockDynamo
}

// NewMockDynamo creates a new mock instance
func NewMockDynamo(ctrl *gomock.Controller) *MockDynamo {
	mock := &MockDynamo{ctrl: ctrl}
	mock.recorder = &MockDynamoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamo) EXPECT() *MockDynamoMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockDynamo) Read(table, key, value string) (types.Config, error) {
	ret := m.ctrl.Call(m, "Read", table, key, value)
	ret0, _ := ret[0].(types.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockDynamoMockRecorder) Read(table, key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDynamo)(nil).Read), table, key, value)
}

// Write mocks base method
func (m *MockDynamo) Write(table string, c types.Config) error {
	ret := m.ctrl.Call(m, "Write", table, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockDynamoMockRecorder) Write(table, c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDynamo)(nil).Write), table, c)
}
